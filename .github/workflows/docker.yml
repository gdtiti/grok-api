name: Build Docker Image

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '要构建的分支名称'
        required: true
        default: 'main'
        type: string
      version:
        description: '版本标签 (可选，留空则使用分支名)'
        required: false
        default: ''
        type: string
      push_image:
        description: '是否推送镜像到库'
        required: true
        default: true
        type: boolean
      create_release_tag:
        description: '是否创建发布标签'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gdtiti/${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # AMD64 平台
          - platform: linux/amd64
            suffix: amd64
          # ARM64 平台
          - platform: linux/arm64
            suffix: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 自定义版本标签
            type=raw,value=${{ github.event.inputs.version || github.event.inputs.branch }},suffix=-${{ matrix.suffix }},enable=${{ github.event.inputs.version != '' }}
            # 分支标签
            type=raw,value=${{ github.event.inputs.branch }},suffix=-${{ matrix.suffix }},enable=${{ github.event.inputs.version == '' }}
            # latest标签 (仅当分支为main时)
            type=raw,value=latest-${{ matrix.suffix }},enable=${{ github.event.inputs.branch == 'main' && github.event.inputs.version == '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ github.event.inputs.push_image == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.suffix }}
          cache-to: type=gha,mode=max,scope=${{ matrix.suffix }}
          pull: true
  
  # 合并多架构镜像为统一标签
  merge-manifests:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.push_image == 'true'
    permissions:
      contents: read
      packages: write
      attestations: write
    
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 自定义版本标签
            type=raw,value=${{ github.event.inputs.version || github.event.inputs.branch }},enable=${{ github.event.inputs.version != '' }}
            # 分支标签
            type=raw,value=${{ github.event.inputs.branch }},enable=${{ github.event.inputs.version == '' }}
            # latest标签 (仅当分支为main时)
            type=raw,value=latest,enable=${{ github.event.inputs.branch == 'main' && github.event.inputs.version == '' }}
      
      - name: Create and push manifest
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          for tag in $TAGS; do
            echo "合并标签: $tag"
            docker buildx imagetools create -t $tag \
              ${tag}-amd64 \
              ${tag}-arm64
          done

      - name: Create Git tag (if requested)
        if: github.event.inputs.create_release_tag == 'true' && github.event.inputs.version != ''
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "创建 Git 标签: $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
